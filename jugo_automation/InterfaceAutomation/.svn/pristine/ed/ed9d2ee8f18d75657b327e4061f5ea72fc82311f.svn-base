# -*- coding:utf-8 -*-
__author__ = 'jasonchen'
from TestBase import Test

class SendSmsCode(Test):
    def __init__(self, url, para, mobile):
        Test.__init__(self)
        self._url = url
        self._para = para
        self._mobile = mobile
        self.res = self.Test_SendSmsCode()

    def Test_SendSmsCode(self):
        # 1-cookies
        # 2-headers
        headers = {'Content-Type': 'application/json;charset=UTF-8', 'Connection': 'keep-alive',
                   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36'}
        # 3-session
        sess = self.start_session()
        # 4-send request
        # handle para evaluation
        paradict = {}
        if len(self._para) > 0:
            self.check_para(self._para)
            paradict[self._para[0]] = self._mobile
            paradict[self._para[1]] = True

        res = self.visit_url(sessiondata=sess, url=self._url, method='post', params=paradict, headers=headers,
                             bodytype='json')
        # print res
        return res

    # assert method

    def Test_failure_check(self):

        assert self.res['body']['errMsg'] == '手机号未注册'


class ValidSmsCode(Test):
    def __init__(self, url, para, mobile, smscode):
        Test.__init__(self)
        self._url = url
        self._para = para
        self._mobile = mobile
        self._smscode = smscode
        self.res = self.Test_ValidSmsCode()

    def Test_ValidSmsCode(self):
        # 1-cookies
        # 2-headers
        headers = {'Content-Type': 'application/json;charset=UTF-8', 'Connection': 'keep-alive',
                   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36'}
        # 3-session
        sess = self.start_session()
        # 4-send request
        # handle para evaluation
        paradict = {}
        if len(self._para) > 0:
            self.check_para(self._para)
            paradict[self._para[0]] = self._mobile
            paradict[self._para[1]] = self._smscode

        res = self.visit_url(sessiondata=sess, url=self._url, method='post', params=paradict, headers=headers,
                             bodytype='json')
        return res

    # assert method

    def Test_failure_check(self):
        assert self.res['body']['errMsg'] == '验证码错误'
